<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[prime31 blog - Game dev tips, tricks and random thoughts]]></title>
  <link href="https://prime31.github.io/atom.xml" rel="self"/>
  <link href="https://prime31.github.io/"/>
  <updated>2019-03-29T19:06:16+00:00</updated>
  <id>https://prime31.github.io/</id>
  <author>
    <name><![CDATA[Mike]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using the Stencil Buffer for Sprite Occlusion]]></title>
    <link href="https://prime31.github.io/stencil-buffer-occlusion"/>
    <updated>2015-10-13T00:19:16-07:00</updated>
    <id>https://prime31.github.io/stencil-buffer-occlusion</id>
    <content type="html"><![CDATA[<p>Back in <a href="https://prime31.github.io/SpriteLightKit/">the post</a> on SpriteLightKit, we talked about the stencil buffer and we left things off with a homework assignment. I also did the homework assignment and will be sharing the result that I came up with.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pixel Perfect Camera]]></title>
    <link href="https://prime31.github.io/pixel-perfect-camera"/>
    <updated>2015-09-18T16:57:31-07:00</updated>
    <id>https://prime31.github.io/pixel-perfect-camera</id>
    <content type="html"><![CDATA[<p>This post is going to be a little bit different. It will mainly consist of a video with a small amount of accompanying text. Hit me up on Twitter (<a href="https://twitter.com/prime_31">@prime_31</a>) to let me know if you prefer text or video posts. This particular post is very visual seeing as how it is demonstrating a pixel perfect camera.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpriteLightKit and Stencil Buffer Introduction]]></title>
    <link href="https://prime31.github.io/SpriteLightKit"/>
    <updated>2015-09-04T12:43:25-07:00</updated>
    <id>https://prime31.github.io/spritelightkit</id>
    <content type="html"><![CDATA[<p>SpriteLightKit brings back the old two buffered blend trick to get pseudo lighting with just sprites. It handles the setup process of getting that second buffer blended with your normal scene. This post will delve into how it works and along the way it will explain the shader techniques used to pull it off.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Method for Working With Shared Code With Unity and Git]]></title>
    <link href="https://prime31.github.io/A-Method-for-Working-with-Shared-Code-with-Unity-and-Git"/>
    <updated>2015-05-19T12:45:51-07:00</updated>
    <id>https://prime31.github.io/a-method-for-working-with-shared-code-with-unity-and-git</id>
    <content type="html"><![CDATA[<p>Out of the box Unity doesn&rsquo;t provide any good way to have a shared codebase that is used amongst multiple Unity projects. Any code that you drag into a Unity project is automatically copied into it. If you make changes to your shared code you have to remember to change it in every project that uses it. This is obviously not a sustainable approach.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Xamarin/MonoDevelop Work for You]]></title>
    <link href="https://prime31.github.io/making-xamarin-work-for-you"/>
    <updated>2015-05-04T11:42:29-07:00</updated>
    <id>https://prime31.github.io/making-xamarin-work-for-you</id>
    <content type="html"><![CDATA[<p>One of the biggest pain points with using Unity for game development is the absolutely <em>ancient</em> version of MonoDevelop that ships with it. Anyone who writes code for Unity will spend a vast majority of their time in MonoDevelop as opposed to in Unity itself. This post aims to make that time more enjoyable and less angst filled. As of Unity 5 MonoDevelop 4.0.1 is included with the installer. MonoDevelop 4.0.1 was released on March 5th, <em>2013</em>. Yes, you read that correctly. Over 2 years ago. MonoDevelop is currenctly on version 5.9 which has 2+ years of development time, 2+ years of improvements, 2+ years of bug fixes compared to the Unity fork.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Sprite Blink]]></title>
    <link href="https://prime31.github.io/sprite-blink-shader"/>
    <updated>2015-04-19T14:48:41-07:00</updated>
    <id>https://prime31.github.io/sprite-blink-shader</id>
    <content type="html"><![CDATA[<p>This is the first post in response to a reader-suggested topic and probably not the last. If there is a specific topic that you would like to see covered feel free to send over a question/request. Quite often when dealing with sprites you may want to have the sprite blink in a solid color to indicate various different states such as taking damage, build up before attack, etc. Unity&rsquo;s default sprite shader has only a tint color property so out of the box it isn&rsquo;t possible to do.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Tween Library]]></title>
    <link href="https://prime31.github.io/anatomy-of-a-tween-lib"/>
    <updated>2015-04-18T01:29:33+00:00</updated>
    <id>https://prime31.github.io/anatomy-of-a-tween-lib</id>
    <content type="html"><![CDATA[<p>Every game engine seems to have dozens of tween libs available. In this post we will dive head first into what a tween lib really is and eventually end up with the design decisions that went into GoKit, GoKitLite and the soon to be released ZestKit (yes, that will be the <em>third</em> open source tween lib that I release for Unity. Shoot me).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PropEnumEvents (Wtf?)]]></title>
    <link href="https://prime31.github.io/prop-enum-events"/>
    <updated>2015-03-27T21:05:54-07:00</updated>
    <id>https://prime31.github.io/enum-property-events</id>
    <content type="html"><![CDATA[<p>I often use <a href="https://github.com/prime31/StateKit">StateKit</a> (a simple, object-based finite state machine implementation) for all kinds of state management. It gets used for enemy AI, player controllers, menus and just about everywhere else. In a recent project that was not very well defined (to be honest, it was made almsot completely on the fly) I needed a super flexible way to deal with a hierarchial state machine. The solution presented in this post is what I ended up using and it has been dubbed the PropEnumEvent system.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making PlayerPrefs Sane]]></title>
    <link href="https://prime31.github.io/making-playerprefs-sane"/>
    <updated>2015-02-11T10:24:30-08:00</updated>
    <id>https://prime31.github.io/making-player-prefs-sane</id>
    <content type="html"><![CDATA[<p>In past posts (mainly <a href="https://prime31.github.io/constants-generator-kit">this one</a>), we talked about reducing or removing all &ldquo;naked strings&rdquo;. We do this to reduce coding errors and maintain sanity as projects grow in size. The post provided a solution for tags, layers, scenes and resources. It did not, however, help clean up the much used-and-abused PlayerPrefs.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting Strongly Typed Data With JSON]]></title>
    <link href="https://prime31.github.io/persisting-data-with-json"/>
    <updated>2015-02-02T10:24:30-08:00</updated>
    <id>https://prime31.github.io/persisting-data-with-json</id>
    <content type="html"><![CDATA[<p>JSON is often thought of as a data transport format for hipsters who use Node.js or Ruby or whatever the new language/platform for cool kids is this week. JSON also happens to be a fantastic way for us nerds to store data in a human-readable format that is well suited for game dev.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Value Mapping]]></title>
    <link href="https://prime31.github.io/simple-value-mapping"/>
    <updated>2015-01-16T11:53:46-08:00</updated>
    <id>https://prime31.github.io/simple-value-mapping</id>
    <content type="html"><![CDATA[<p>This post is a quick one that covers a technique that I use all over the place: mapping a value from one range to a completely different range. Uses include everything from a simple health bar to mesh deformation to UI layout to shader vertex mods and tons more.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Garbage Collection and How to Avoid It]]></title>
    <link href="https://prime31.github.io/recyclerkit"/>
    <updated>2015-01-05T17:16:05-08:00</updated>
    <id>https://prime31.github.io/recycler-kit</id>
    <content type="html"><![CDATA[<p>Managed languages (like C#) have often been touted as the panacea of programming. We no longer need to be concerned with memory management. Memory leaks are a thing of the past. Retain/release/delete is banashed to the bowels of hell. The garbage collector (GC from here on out) will take care of all the ugly details of memory management for us.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interactive 2D Foliage]]></title>
    <link href="https://prime31.github.io/grass2d"/>
    <updated>2014-12-19T14:45:21-08:00</updated>
    <id>https://prime31.github.io/grass2d</id>
    <content type="html"><![CDATA[<p>Having interactive foliage in your game helps bring some life to your environment. It makes everything feel more alive. There are lots of different ways to handle interactive foliage. The easiest way is to stick a trigger collider on your GameObject. When the player hits the trigger just move it back and forth on the x-axis. In this post we will go over how to kick that up a notch.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ConstantsGeneratorKit: Killing Naked Strings So You Don't Have To]]></title>
    <link href="https://prime31.github.io/constants-generator-kit"/>
    <updated>2014-12-05T19:12:12-08:00</updated>
    <id>https://prime31.github.io/constants-generator-kit</id>
    <content type="html"><![CDATA[<p>Killing naked strings? What the heck does that even mean? If you have ever worked on a large project with a medium-to-large sized team you will know exactly what I am talking about. How many times have you seen brittle code like this <code>GameObject.FindWithTag( "SpawnPoint" )</code> or this <code>someGameObject.tag == "Enemy"</code>? Those strings are naked and afraid and they will come back to haunt you later.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling 2D Water With Springs: Part 2]]></title>
    <link href="https://prime31.github.io/water2d-part2"/>
    <updated>2014-12-01T22:09:42-08:00</updated>
    <id>https://prime31.github.io/water2d-part2</id>
    <content type="html"><![CDATA[<p>In part 1, all the groundwork for setting up the water simulation was laid. We have springs attached to the top verts of the water plane, which always want to remain in their neutral position. Once a force is applied to the springs they will oscillate back and forth based on the dampening and tension constants that are passed in.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling 2D Water With Springs: Part 1]]></title>
    <link href="https://prime31.github.io/water2d-part1"/>
    <updated>2014-11-28T17:16:05-08:00</updated>
    <id>https://prime31.github.io/water2d-part1</id>
    <content type="html"><![CDATA[<p>Water is one of those things in the world of game development that can range anywhere from incredibly simple to insanely complex. Your first attempt at making water might not be anything more than a transparent quad. Compare a solution like that with something like the water as seen in <a href="https://www.google.com/search?q=Assassin%27s+Creed+IV:+Black+Flag+water&amp;tbm=isch">Assassin&rsquo;s Creed IV: Black Flag</a> or <a href="https://www.google.com/search?q=bioshock+water&amp;tbm=isch">Bioshock</a> to get an idea of how far it can be taken.</p>

]]></content>
  </entry>
  
</feed>
